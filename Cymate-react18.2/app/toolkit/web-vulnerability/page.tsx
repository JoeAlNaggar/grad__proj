"use client"

import { useState } from "react"
import {
  Globe,
  AlertCircle,
  Download,
  Copy,
  Mail,
  Search,
  AlertTriangle,
  Lock,
  Shield,
  Database,
  Server,
  FileCode,
  FileSearch,
  CheckCircle,
  Zap,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScanProgress } from "@/components/ui/scan-progress"
import Link from "next/link"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { toast } from "@/components/ui/use-toast"
import { motion, AnimatePresence } from "framer-motion"

const vulnerabilityCategories = [
  {
    icon: Lock,
    title: "Broken Access Control",
    description:
      "Exploitation of improper enforcement of access controls, allowing attackers to perform unauthorized actions.",
  },
  {
    icon: Shield,
    title: "Cryptographic Failures",
    description:
      "Inadequate protection of sensitive data due to weak or improperly implemented cryptographic techniques.",
  },
  {
    icon: Globe,
    title: "Insecure Design",
    description:
      "Issues arising from security being overlooked in the application design phase, leading to exploitable weaknesses.",
  },
  {
    icon: AlertCircle,
    title: "Security Misconfiguration",
    description:
      "Configuration weaknesses, such as incomplete or improper configurations, default settings, or unnecessary features being enabled.",
  },
  {
    icon: AlertTriangle,
    title: "Vulnerable Components",
    description: "Usage of outdated or unpatched components, libraries, or frameworks with known vulnerabilities.",
  },
  {
    icon: Database,
    title: "Identification Failures",
    description:
      "Weaknesses in authentication mechanisms, leading to unauthorized access or impersonation of other users.",
  },
  {
    icon: Server,
    title: "Software Integrity Failures",
    description:
      "Trust issues with software updates, critical data, and CI/CD pipelines without integrity verification.",
  },
  {
    icon: FileSearch,
    title: "Logging Failures",
    description: "Insufficient logging and monitoring, hindering the detection of breaches or security incidents.",
  },
  {
    icon: FileCode,
    title: "Server-Side Request Forgery",
    description:
      "Vulnerabilities allowing attackers to force the server to make malicious requests to internal or external systems.",
  },
]

export default function WebVulnerability() {
  const [input, setInput] = useState("")
  const [selectedCategory, setSelectedCategory] = useState<number | null>(null)
  const [showError, setShowError] = useState(false)
  const [result, setResult] = useState<string | null>(null)
  const [email, setEmail] = useState("")
  const [showEmailError, setShowEmailError] = useState(false)
  const [isEmailSent, setIsEmailSent] = useState(false)
  const [isScanning, setIsScanning] = useState(false)

  const handleCategorySelect = (index: number) => {
    setSelectedCategory(selectedCategory === index ? null : index)
  }

  const handleAction = async () => {
    if (!input.trim() || selectedCategory === null) {
      setShowError(true)
      return
    }

    setIsScanning(true)
  }

  const handleScanComplete = (result: any) => {
    setIsScanning(false)
    setResult(JSON.stringify(result, null, 2))
  }

  const handleEmailReport = () => {
    if (!email) {
      setShowEmailError(true)
      setTimeout(() => setShowEmailError(false), 3000)
      return
    }

    setIsEmailSent(true)
    toast({
      title: "Report Sent!",
      description: "The web vulnerability report has been sent to your email.",
    })

    setTimeout(() => {
      setIsEmailSent(false)
      setEmail("")
    }, 2000)
  }

  return (
    <div className="space-y-8">
      <div className="bg-gradient-to-r from-green-600 to-teal-600 text-white rounded-3xl p-8 shadow-xl">
        <h1 className="text-4xl font-bold mb-4">Web Vulnerability Scanner</h1>
        <p className="text-xl">Identify and assess vulnerabilities in your web applications</p>
      </div>

      <div className="bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-2xl shadow-lg p-6 space-y-6">
        <Input
          placeholder="Enter a domain, URL, or link (e.g., google.com)"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          className="text-lg"
        />

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {vulnerabilityCategories.map((category, index) => (
            <motion.div
              key={index}
              className={`relative overflow-hidden rounded-xl shadow-md transition-all duration-300 cursor-pointer ${
                selectedCategory === index ? "ring-2 ring-blue-500 shadow-lg" : "hover:shadow-lg"
              }`}
              onClick={() => handleCategorySelect(index)}
              whileHover={{ scale: 1.03 }}
              whileTap={{ scale: 0.98 }}
            >
              <div className="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-purple-500/10 opacity-50"></div>
              <div className="relative p-6">
                <div className="flex items-center mb-4">
                  <div className="p-3 rounded-full bg-blue-100 dark:bg-blue-900/20 text-blue-500 mr-4">
                    <category.icon className="w-6 h-6" />
                  </div>
                  <h3 className="text-lg font-semibold">{category.title}</h3>
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-300">{category.description}</p>
                {selectedCategory === index && (
                  <div className="absolute top-2 right-2 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-sm font-bold">
                    âœ“
                  </div>
                )}
              </div>
            </motion.div>
          ))}
        </div>
      </div>

      <div className="fixed bottom-6 left-6 z-50 flex gap-2">
        <Button onClick={handleAction} className="bg-green-500 hover:bg-green-600 text-white shadow-lg">
          Scan
          <Search className="w-4 h-4 ml-2" />
        </Button>

        <Link href="/toolkit/threat-intelligence">
          <Button
            variant="outline"
            className="relative overflow-hidden group hover:shadow-lg hover:shadow-red-500/20 transition-all duration-300 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm"
          >
            <span className="absolute inset-0 bg-gradient-to-r from-red-500 to-pink-500 opacity-0 group-hover:opacity-20 transition-opacity duration-300"></span>
            <AlertTriangle className="w-4 h-4 mr-2" />
            <span className="relative z-10 text-gray-700 dark:text-gray-300 group-hover:text-red-500 transition-colors duration-300">
              Deep Dive
            </span>
          </Button>
        </Link>

        {result && (
          <Button
            variant="outline"
            className="animate-pulse bg-green-500/20 text-green-600 dark:text-green-400"
            onClick={() => {
              document.getElementById("results-section")?.scrollIntoView({ behavior: "smooth" })
            }}
          >
            <Zap className="w-4 h-4 mr-2" />
            View Results
          </Button>
        )}
      </div>

      {isScanning && (
        <ScanProgress
          scanType="Web Vulnerability Scan"
          data={{ input, category: selectedCategory !== null ? vulnerabilityCategories[selectedCategory].title : null }}
          onComplete={handleScanComplete}
        />
      )}

      {/* Results Section */}
      <AnimatePresence>
        {result && (
          <motion.div
            id="results-section"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-2xl shadow-lg p-6 mb-8"
          >
            <h2 className="text-2xl font-semibold mb-4">Vulnerability Scan Report</h2>
            <pre className="text-gray-600 dark:text-gray-300 mb-6 whitespace-pre-wrap">{result}</pre>
            <div className="flex flex-wrap gap-4">
              <Button variant="outline" onClick={() => {}}>
                <Download className="w-4 h-4 mr-2" />
                Download Report
              </Button>
              <Button variant="outline" onClick={() => {}}>
                <Copy className="w-4 h-4 mr-2" />
                Copy Report
              </Button>
              <div className="flex gap-2 relative">
                <Input
                  type="email"
                  placeholder="Enter email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className={showEmailError ? "ring-2 ring-red-500" : ""}
                />
                <Button onClick={handleEmailReport} className="relative">
                  {isEmailSent ? (
                    <motion.div initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }}>
                      <CheckCircle className="w-4 h-4 text-green-500" />
                    </motion.div>
                  ) : (
                    <Mail className="w-4 h-4" />
                  )}
                </Button>
                {showEmailError && (
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    className="absolute right-full mr-2 top-1/2 -translate-y-1/2 text-red-500 text-sm whitespace-nowrap"
                  >
                    Please enter an email
                  </motion.div>
                )}
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <Dialog open={showError} onOpenChange={setShowError}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <AlertCircle className="w-5 h-5 text-red-500" />
              Input Required
            </DialogTitle>
            <DialogDescription>
              Please enter a valid URL or upload a file, and select a vulnerability category before scanning.
            </DialogDescription>
          </DialogHeader>
        </DialogContent>
      </Dialog>

      {/* Dark mode background effects */}
      <div className="fixed inset-0 -z-10 dark:bg-gray-900">
        <div className="absolute top-0 left-0 w-1/3 h-1/3 bg-purple-500/10 rounded-full filter blur-3xl animate-pulse"></div>
        <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-blue-500/10 rounded-full filter blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/4 w-1/4 h-1/4 bg-pink-500/10 rounded-full filter blur-3xl animate-pulse delay-2000"></div>
      </div>
    </div>
  )
}

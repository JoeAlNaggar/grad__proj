"use client"

import { useState } from "react"
import axios from "axios"
import {
  Globe,
  AlertCircle,
  Download,
  Copy,
  Mail,
  Search,
  AlertTriangle,
  Lock,
  Shield,
  Database,
  Server,
  FileCode,
  FileSearch,
  CheckCircle,
  Zap,
} from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { FileInput } from "@/components/ui/file-input"
import { ScanProgress } from "@/components/ui/scan-progress"
import Link from "next/link"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { toast } from "@/lib/hooks/use-toast"
import { motion, AnimatePresence } from "framer-motion"
import { modifyToolkitTokens } from "@/app/services/api"

const API_BASE_URL = 'http://localhost:3000/web';

const vulnerabilityTools = [
  {
    title: "Security Misconfiguration",
    description: "Configuration weaknesses, such as incomplete or improper configurations, default settings, or unnecessary features being enabled.",
    icon: AlertCircle,
    endpoint: "/webconfig",
    method: "POST",
    requestType: "json",
    inputs: [{ type: "text", placeholder: "URL (e.g., http://demo.testfire.net)", key: "url" }],
  },
  {
    title: "Cryptographic Failures",
    description: "Inadequate protection of sensitive data due to weak or improperly implemented cryptographic techniques.",
    icon: Shield,
    endpoint: "/crypto",
    method: "POST", 
    requestType: "json",
    inputs: [{ type: "text", placeholder: "Input URL (e.g., http://google.com)", key: "input" }],
  },
  {
    title: "Insecure Design",
    description: "Issues arising from security being overlooked in the application design phase, leading to exploitable weaknesses.",
    icon: Globe,
    endpoint: "/design-checker",
    method: "POST",
    requestType: "json",
    inputs: [{ type: "text", placeholder: "Design issue description (e.g., The login API has no rate limiting)", key: "design" }],
  },
  {
    title: "Vulnerable Components",
    description: "Usage of outdated or unpatched components, libraries, or frameworks with known vulnerabilities.",
    icon: AlertTriangle,
    endpoint: "/vlun",
    method: "POST",
    requestType: "multipart",
    inputs: [{ type: "file", placeholder: "Upload file to scan for vulnerabilities", key: "file" }],
  },
  {
    title: "Identification Failures", 
    description: "Weaknesses in authentication mechanisms, leading to unauthorized access or impersonation of other users.",
    icon: Database,
    endpoint: "/identify-failure",
    method: "POST",
    requestType: "json",
    inputs: [{ type: "text", placeholder: "URL with credentials (e.g., http://example.com http://example.com/login admin:admin)", key: "url" }],
  },
  {
    title: "Logging Failures",
    description: "Insufficient logging and monitoring, hindering the detection of breaches or security incidents.",
    icon: FileSearch,
    endpoint: "/logging-failure",
    method: "POST",
    requestType: "multipart",
    inputs: [{ type: "file", placeholder: "Upload file to test logging mechanisms", key: "file" }],
  },
  {
    title: "Server-Side Request Forgery",
    description: "Vulnerabilities allowing attackers to force the server to make malicious requests to internal or external systems.",
    icon: FileCode,
    endpoint: "/ssrf",
    method: "POST",
    requestType: "json",
    inputs: [{ type: "text", placeholder: "Target URL (e.g., http://localhost:3000)", key: "target" }],
  },
  {
    title: "Software Integrity Failures",
    description: "Trust issues with software updates, critical data, and CI/CD pipelines without integrity verification.",
    icon: Server,
    endpoint: "/integrity",
    method: "POST",
    requestType: "multipart",
    inputs: [{ type: "file", placeholder: "Upload file to check integrity", key: "file" }],
  },
];

export default function WebVulnerability() {
  const [expandedTool, setExpandedTool] = useState<number | null>(null)
  const [showError, setShowError] = useState(false)
  const [result, setResult] = useState<string | null>(null)
  const [email, setEmail] = useState("")
  const [showEmailError, setShowEmailError] = useState(false)
  const [isEmailSent, setIsEmailSent] = useState(false)
  const [formData, setFormData] = useState<Record<string, any>>({})
  const [files, setFiles] = useState<Record<string, File>>({})
  const [isScanning, setIsScanning] = useState(false)
  const [scanType, setScanType] = useState<string>("")

  const handleToolSelect = (index: number) => {
    if (expandedTool === index) {
      return
    }
    setExpandedTool(index)
    setFormData({})
    setFiles({})
    setScanType(vulnerabilityTools[index].title)
  }

  const handleInputChange = (toolIndex: number, inputIndex: number, value: string) => {
    const inputKey = vulnerabilityTools[toolIndex].inputs[inputIndex].key;
    setFormData((prev) => ({
      ...prev,
      [inputKey]: value,
    }))
  }

  const handleFileChange = (toolIndex: number, inputIndex: number, file: File | null) => {
    const inputKey = vulnerabilityTools[toolIndex].inputs[inputIndex].key;
    if (file) {
      setFiles((prev) => ({
        ...prev,
        [inputKey]: file,
      }))
    } else {
      setFiles((prev) => {
        const newFiles = { ...prev };
        delete newFiles[inputKey];
        return newFiles;
      })
    }
  }

  const handleAction = async () => {
    if (expandedTool === null) {
      setShowError(true);
      return;
    }
  
    setIsScanning(true);
    const selectedTool = vulnerabilityTools[expandedTool];
  
    if (!selectedTool || !selectedTool.endpoint) {
      toast({
        title: "Invalid Tool",
        description: "Please select a valid vulnerability scanning tool.",
        variant: "destructive",
      });
      setIsScanning(false);
      return;
    }
  
    try {
      let response;
      
      if (selectedTool.requestType === "multipart") {
        // Handle multipart/form-data requests
        const formDataObj = new FormData();
        const fileKey = selectedTool.inputs.find(input => input.type === "file")?.key;
        
        if (fileKey && files[fileKey]) {
          formDataObj.append("file", files[fileKey]);
        } else {
          toast({
            title: "File Required",
            description: "Please upload a file for this scan type.",
            variant: "destructive",
          });
          setIsScanning(false);
          return;
        }

        response = await axios.post(`${API_BASE_URL}${selectedTool.endpoint}`, formDataObj, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
      } else {
        // Handle JSON requests
        const hasRequiredData = selectedTool.inputs.some(input => 
          input.type === "text" && formData[input.key]
        );

        if (!hasRequiredData) {
          toast({
            title: "Input Required",
            description: "Please provide the required input for this scan type.",
            variant: "destructive",
          });
          setIsScanning(false);
          return;
        }

        response = await axios.post(`${API_BASE_URL}${selectedTool.endpoint}`, formData);
      }
  
      await handleScanComplete(response.data);
      toast({
        title: "Scan Complete",
        description: "Web vulnerability scan completed successfully.",
      });
    } catch (error: any) {
      console.error("Scanning error:", error.response?.data || error.message);
      toast({
        title: "Scan Failed",
        description: error.response?.data?.message || "An error occurred during the vulnerability scan.",
        variant: "destructive",
      });
      setIsScanning(false);
    }
  };

  const handleScanComplete = async (result: any) => {
    setIsScanning(false);
    setResult(JSON.stringify(result, null, 2));
    
    // Deduct 1 toolkit token after successful scan
    try {
      const newTokenCount = await modifyToolkitTokens('deduct', 1);
      console.log('ðŸŽ« Token deducted, remaining tokens:', newTokenCount);
      
      // Trigger a custom event to update the navbar
      window.dispatchEvent(new CustomEvent('tokensUpdated', { 
        detail: { tokens: newTokenCount } 
      }));
    } catch (error) {
      console.error('Failed to deduct token:', error);
      // Don't show error to user since scan was successful
    }
  }

  const handleEmailReport = () => {
    if (!email) {
      setShowEmailError(true)
      setTimeout(() => setShowEmailError(false), 3000)
      return
    }

    setIsEmailSent(true)
    toast({
      title: "Report Sent!",
      description: "The web vulnerability report has been sent to your email.",
    })

    setTimeout(() => {
      setIsEmailSent(false)
      setEmail("")
    }, 2000)
  }

  const handleDownload = () => {
    if (!result) return;
    
    const blob = new Blob([result], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `web-vulnerability-report-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  }

  const handleCopy = () => {
    if (!result) return;
    
    navigator.clipboard.writeText(result);
    toast({
      title: "Copied!",
      description: "Report copied to clipboard.",
    });
  }

  return (
    <div className="space-y-8">

      <div className="bg-gradient-to-r from-green-600 to-teal-600 text-white rounded-3xl p-8 shadow-xl">
        <h1 className="text-4xl font-bold mb-4">Web Vulnerability Scanner</h1>
        <p className="text-xl">Identify and assess vulnerabilities in your web applications</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {vulnerabilityTools.map((tool, index) => (
          <motion.div
            key={index}
            className={`bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-xl shadow-md overflow-hidden transition-all duration-300 cursor-pointer ${
              expandedTool === index ? "col-span-full" : ""
            }`}
            onClick={() => handleToolSelect(index)}
          >
            <div className="p-6">
              <div className="flex items-center mb-4">
                <div
                  className={`p-3 rounded-full bg-${tool.icon === Shield ? "green" : tool.icon === Globe ? "blue" : tool.icon === AlertCircle ? "yellow" : tool.icon === AlertTriangle ? "red" : "purple"}-100 dark:bg-${tool.icon === Shield ? "green" : tool.icon === Globe ? "blue" : tool.icon === AlertCircle ? "yellow" : tool.icon === AlertTriangle ? "red" : "purple"}-900/20`}
                >
                  <tool.icon
                    className={`w-6 h-6 text-${tool.icon === Shield ? "green" : tool.icon === Globe ? "blue" : tool.icon === AlertCircle ? "yellow" : tool.icon === AlertTriangle ? "red" : "purple"}-500`}
                  />
                </div>
                <h3 className="text-lg font-semibold ml-3">{tool.title}</h3>
              </div>
              <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">{tool.description}</p>

              <AnimatePresence>
                {expandedTool === index && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    transition={{ duration: 0.3 }}
                    onClick={(e) => e.stopPropagation()}
                  >
                                         <div className="space-y-4 mt-4 border-t pt-4 border-gray-200 dark:border-gray-700">
                       {tool.inputs.map((input, inputIndex) => (
                         <div key={inputIndex} className="space-y-2">
                           {input.type === "file" ? (
                             <div className="space-y-2">
                               <FileInput
                                 placeholder={input.placeholder}
                                 onChange={(file) => handleFileChange(index, inputIndex, file)}
                                 accept="*/*"
                               />
                               {files[input.key] && (
                                 <div className="flex items-center gap-2 p-2 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
                                   <CheckCircle className="w-4 h-4 text-green-500" />
                                   <span className="text-sm text-green-700 dark:text-green-300">
                                     {files[input.key].name} ({files[input.key].size} bytes)
                                   </span>
                                 </div>
                               )}
                             </div>
                           ) : (
                             <Input
                               type={input.type}
                               placeholder={input.placeholder}
                               value={formData[input.key] || ""}
                               onChange={(e) => handleInputChange(index, inputIndex, e.target.value)}
                             />
                           )}
                         </div>
                       ))}
                       
                       {/* Action buttons inside expanded tool */}
                       <div className="flex gap-2 pt-4">
                         <Button 
                           onClick={handleAction} 
                           className="bg-green-500 hover:bg-green-600 text-white"
                           disabled={isScanning}
                         >
                           {isScanning ? (
                             <>
                               <div className="w-4 h-4 mr-2 animate-spin rounded-full border-2 border-white border-t-transparent" />
                               Scanning...
                             </>
                           ) : (
                             <>
                               <Search className="w-4 h-4 mr-2" />
                               Start Scan
                             </>
                           )}
                         </Button>

                         {result && (
                           <Button
                             variant="outline"
                             className="bg-blue-500 text-white hover:bg-blue-600"
                             onClick={() => {
                               document.getElementById("results-section")?.scrollIntoView({ behavior: "smooth" })
                             }}
                           >
                             <Zap className="w-4 h-4 mr-2" />
                             View Results
                           </Button>
                         )}
                       </div>
                     </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </motion.div>
        ))}
      </div>

      {isScanning && <ScanProgress scanType={scanType} data={{ ...formData, files: Object.keys(files) }} onComplete={handleScanComplete} />}

      <AnimatePresence>
        {result && (
          <motion.div
            id="results-section"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-2xl shadow-lg p-6 mb-8"
          >
            <h2 className="text-2xl font-semibold mb-4">Web Vulnerability Scan Report</h2>
            
            <div className="overflow-x-auto">
              {(() => {
                try {
                  let parsedResult = typeof result === 'string' ? JSON.parse(result) : result;

                  // Show initial state if no scan has been run
                  if (!parsedResult || Object.keys(parsedResult).length === 0) {
                    return (
                      <div className="text-center py-12">
                        <div className="flex flex-col items-center gap-4">
                          <Search className="w-12 h-12 text-gray-400 dark:text-gray-600" />
                          <h3 className="text-xl font-medium text-gray-700 dark:text-gray-300">
                            Ready to Scan
                          </h3>
                          <p className="text-gray-500 dark:text-gray-400 max-w-md text-center">
                            Select a vulnerability scanning tool and configure its parameters to generate a detailed security analysis report.
                          </p>
                        </div>
                      </div>
                    );
                  }

                  // Handle Security Misconfiguration results
                  if (parsedResult.result && parsedResult.result.target && parsedResult.result.issues && Array.isArray(parsedResult.result.issues)) {
                    return (
                        <table className="w-full border-collapse">
                            <thead>
                                <tr className="bg-gray-50 dark:bg-gray-800/50">
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Target</th>
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Issue Type</th>
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">URL</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                                {parsedResult.result.issues.map((issue: any, index: number) => (
                                    <tr key={index} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                                        <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                            {parsedResult.result.target}
                                        </td>
                                        <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400">
                                                {issue.type}
                                            </span>
                                        </td>
                                        <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                            <a href={issue.url} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 underline">
                                                {issue.url}
                                            </a>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    );
                }

                  // Handle Cryptographic Failures results
                  if (parsedResult.result && parsedResult.result.input && parsedResult.result.warnings && Array.isArray(parsedResult.result.warnings)) {
                    return (
                        <table className="w-full border-collapse">
                            <thead>
                                <tr className="bg-gray-50 dark:bg-gray-800/50">
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">URL</th>
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Warnings</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                                <tr className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                                    <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                        {parsedResult.result.input}
                                    </td>
                                    <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                        <div className="space-y-1">
                                            {parsedResult.result.warnings.map((warning: string, index: number) => (
                                                <div key={index} className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400 mr-2 mb-1">
                                                    <AlertTriangle className="w-3 h-3 mr-1" />
                                                    {warning}
                                                </div>
                                            ))}
                                        </div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    );
                }

                // Handle Insecure Design results
                if (parsedResult.result && parsedResult.result.input_snippet && parsedResult.result.issues && Array.isArray(parsedResult.result.issues)) {
                  return (
                      <table className="w-full border-collapse">
                          <thead>
                              <tr className="bg-gray-50 dark:bg-gray-800/50">
                                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Input Snippet</th>
                                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Issue</th>
                                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Recommendation</th>
                                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Severity</th>
                              </tr>
                          </thead>
                          <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                              {parsedResult.result.issues.map((item: any, index: number) => (
                                  <tr key={index} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                                      <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                          {index === 0 ? parsedResult.result.input_snippet : ''}
                                      </td>
                                      <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                          {item.issue}
                                      </td>
                                      <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                              item.severity === 'High' ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400' :
                                              item.severity === 'Medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400' :
                                              'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400'
                                          }`}>
                                              {item.severity}
                                          </span>
                                      </td>
                                      <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                          {item.recommendation}
                                      </td>
                                      
                                  </tr>
                              ))}
                          </tbody>
                      </table>
                  );
              }
              // Handle Identification Failures results
              if (parsedResult.result && parsedResult.result.target && parsedResult.result.vulnerabilities && Array.isArray(parsedResult.result.vulnerabilities)) {
                return (
                    <div className="space-y-6">
                        
                        {/* Vulnerabilities table */}
                        <table className="w-full border-collapse">
                            <thead>
                                <tr className="bg-gray-50 dark:bg-gray-800/50">
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Target</th>
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Issue</th>
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Description</th>
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Severity</th>
                                    <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Recommendation</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                                {parsedResult.result.vulnerabilities.map((vuln: any, index: number) => (
                                    <tr key={vuln.id} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                                        <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                            {index === 0 ? parsedResult.result.target : ''}
                                        </td>
                                        <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                            {vuln.title}
                                        </td>
                                        <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                            {vuln.description}
                                        </td>
                                        <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                                vuln.severity === 'Critical' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400' :
                                                vuln.severity === 'High' ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400' :
                                                vuln.severity === 'Medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400' :
                                                'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400'
                                            }`}>
                                                {vuln.severity}
                                            </span>
                                        </td>
                                        <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                            {vuln.remediation}
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
            
                        {/* Summary section */}
                         {parsedResult.result.summary && (
                        <div className="bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg">
                            <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-3">Findings Summary</h3>
                            <div className="flex divide-x divide-gray-200 dark:divide-gray-700 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
                                {Object.entries(parsedResult.result.summary)
                                    .filter(([severity, count]) => 
                                        count > 0 && 
                                        severity !== 'total_findings' && 
                                        severity !== 'info'
                                    )
                                    .map(([severity, count]) => (
                                        <div 
                                            key={severity} 
                                            className={`flex-1 text-center py-3 ${
                                                severity === 'Critical' ? 'bg-purple-50 dark:bg-purple-900/20' :
                                                severity === 'High' ? 'bg-red-50 dark:bg-red-900/20' :
                                                severity === 'Medium' ? 'bg-yellow-50 dark:bg-yellow-900/20' :
                                                'bg-blue-50 dark:bg-blue-900/20'
                                            }`}
                                        >
                                            <div className={`text-2xl font-bold ${
                                                severity === 'Critical' ? 'text-purple-600 dark:text-purple-400' :
                                                severity === 'High' ? 'text-red-600 dark:text-red-400' :
                                                severity === 'Medium' ? 'text-yellow-600 dark:text-yellow-400' :
                                                'text-blue-600 dark:text-blue-400'
                                            }`}>
                                                {count}
                                            </div>
                                            <div className="text-sm text-gray-600 dark:text-gray-300 mt-1 capitalize">
                                                {severity}
                                            </div>
                                        </div>
                                    ))}
                            </div>
                        </div>
                    )}
                    </div>
                );
            }
            // Handle ssrf results
            if (parsedResult.result && parsedResult.result.url && parsedResult.result.warnings && Array.isArray(parsedResult.result.warnings)) {
              return (
                <div className="space-y-6">
                  {/* Warnings table */}
                  <table className="w-full border-collapse">
                    <thead>
                      <tr className="bg-gray-50 dark:bg-gray-800/50">
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Target</th>
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Warnings</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                      {parsedResult.result.warnings.map((warning: string, index: number) => (
                        <tr key={index} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                          <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                            {index === 0 ? parsedResult.result.url : ''}
                          </td>
                          <td className="px-4 py-3 text-sm">
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400">
                              {warning}
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              );
            }
            // handle Vulnerable Components results
            if (parsedResult.result && parsedResult.result.vulnerable_packages && Array.isArray(parsedResult.result.vulnerable_packages)) {
              return (
                  <div className="space-y-6">
          
                      <table className="w-full border-collapse">
                          <thead>
                              <tr className="bg-gray-50 dark:bg-gray-800/50">
                                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Vulnerable Packages</th>
                                  <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Vulnerabilities</th>
                              </tr>
                          </thead>
                          <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                              {parsedResult.result.vulnerable_packages.map((pkg: any, pkgIndex: number) => (
                                  <tr key={pkgIndex} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                                      <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100 align-top">
                                          <div className="font-medium">
                                              {pkg.package} v{pkg.version}
                                          </div>
                                      </td>
                                      <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                          <div className="space-y-4">
                                              {pkg.vulnerabilities.map((vuln: any, vulnIndex: number) => (
                                                
                                                vuln.summary ? (
                                                  <div key={vulnIndex} className="border-l-4 border-red-500 pl-3 py-1">
                                                    <div className="font-medium text-red-600 dark:text-red-400">
                                                      {vuln.summary}
                                                    </div>
                                                    <div className="text-gray-600 dark:text-gray-300 mt-1">
                                                      {vuln.details}
                                                    </div>
                                                  </div>
                                                ) : null
                                              ))}
                                          </div>
                                      </td>
                                  </tr>
                              ))}
                          </tbody>
                      </table>
                  </div>
              );
          }
            // handle Logging Failures results
          if (parsedResult.result?.findings && Array.isArray(parsedResult.result.findings)) {
    const filteredFindings = parsedResult.result.findings
        .filter(finding => finding.details && Object.keys(finding.details).length > 0);
    return (
        <div className="space-y-6">

            {/* Findings table */}
            <table className="w-full border-collapse">
                <thead>
                    <tr className="bg-gray-50 dark:bg-gray-800/50">
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Warnings</th>
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Severity</th>
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">Details</th>
                    </tr>
                </thead>
                <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                    {filteredFindings.map((finding, index) => ( 
                        <tr key={index} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                            <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                {finding.description}
                            </td>
                            <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                    finding.severity === 'critical' ? 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-400' :
                                    finding.severity === 'high' ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400' :
                                    finding.severity === 'medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400' :
                                    'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400'
                                }`}>
                                    {finding.severity}
                                </span>
                            </td>
                            <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                <div className="space-y-1">
                                    {finding.details.issues?.map((issue: string, i: number) => (
                                        <div key={i} className="flex items-start">
                                            <span className="text-red-500 dark:text-red-400 mr-1">â€¢</span>
                                            <span>{issue}</span>
                                        </div>
                                    ))}
                                    {finding.details.types?.map((type: string, i: number) => (
                                        <div key={i} className="flex items-start">
                                            <span className="text-red-500 dark:text-red-400 mr-1">â€¢</span>
                                            <span>{type}</span>
                                        </div>
                                    ))}
                                    {(!finding.details.issues && !finding.details.types) && (
                                        <span className="text-gray-400 dark:text-gray-500">No details available</span>
                                    )}
                                </div>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>

            {/* Summary section - only show severities from filtered items */}
            {parsedResult.result.summary && (
                <div className="bg-gray-50 dark:bg-gray-800/50 p-4 rounded-lg">
                    <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-3">Findings Summary</h3>
                    <div className="flex divide-x divide-gray-200 dark:divide-gray-700 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
                        {Object.entries(
                            filteredFindings.reduce((acc, finding) => { 
                                acc[finding.severity] = (acc[finding.severity] || 0) + 1;
                                return acc;
                            }, {} as Record<string, number>)
                        ).map(([severity, count]) => (
                            <div
                                key={severity}
                                className={`flex-1 text-center py-3 ${
                                    severity === 'critical' ? 'bg-purple-50 dark:bg-purple-900/20' :
                                    severity === 'high' ? 'bg-red-50 dark:bg-red-900/20' :
                                    severity === 'medium' ? 'bg-yellow-50 dark:bg-yellow-900/20' :
                                    'bg-blue-50 dark:bg-blue-900/20'
                                }`}
                            >
                                <div className={`text-2xl font-bold ${
                                    severity === 'critical' ? 'text-purple-600 dark:text-purple-400' :
                                    severity === 'high' ? 'text-red-600 dark:text-red-400' :
                                    severity === 'medium' ? 'text-yellow-600 dark:text-yellow-400' :
                                    'text-blue-600 dark:text-blue-400'
                                }`}>
                                    {count}
                                </div>
                                <div className="text-sm text-gray-600 dark:text-gray-300 mt-1 capitalize">
                                    {severity}
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            )}
        </div>
    );
}
            // handle integrity results 
          if (
  parsedResult.result &&
  parsedResult.result.integrity_checks &&
  parsedResult.result.integrity_checks.sensitive_data &&
  parsedResult.result.integrity_checks.dependencies &&
  parsedResult.result.integrity_checks.build_process
) {
  const sensitiveKeywords = parsedResult.result.integrity_checks.sensitive_data.found_sensitive_keywords;
  const dependencyIssues = parsedResult.result.integrity_checks.dependencies.dependency_integrity_issues;
  const buildIssues = parsedResult.result.integrity_checks.build_process.build_integrity_issues;

  return (
    <table className="w-full border-collapse mt-6">
      <thead>
        <tr className="bg-gray-50 dark:bg-gray-800/50">
          <th className="px-4 py-3 text-left text-sm font-semibold text-gray-700 dark:text-gray-300">
            Sensitive Keywords
          </th>
          <th className="px-4 py-3 text-left text-sm font-semibold text-gray-700 dark:text-gray-300">
            Dependency Issues
          </th>
          <th className="px-4 py-3 text-left text-sm font-semibold text-gray-700 dark:text-gray-300">
            Build Issues
          </th>
        </tr>
      </thead>
      <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
        <tr className="hover:bg-gray-50 dark:hover:bg-gray-800/50">

          {/* Sensitive Keywords */}
          <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100 align-top">
            {sensitiveKeywords.length > 0 ? (
              <ul className="list-disc list-inside space-y-1">
                {sensitiveKeywords.map((item, idx) => (
                  <li key={idx} className="text-red-600 dark:text-red-400">{item}</li>
                ))}
              </ul>
            ) : (
              <span className="text-green-600 bg-green-100 dark:bg-green-900/30 dark:text-green-400 rounded px-2 py-1 inline-block">
                No issues found
              </span>
            )}
          </td>

          {/* Dependency Issues */}
          <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100 align-top">
            {dependencyIssues.length > 0 ? (
              <ul className="list-disc list-inside space-y-1">
                {dependencyIssues.map((item, idx) => (
                  <li key={idx} className="text-red-600 dark:text-red-400">{item}</li>
                ))}
              </ul>
            ) : (
              <span className="text-green-600 bg-green-100 dark:bg-green-900/30 dark:text-green-400 rounded px-2 py-1 inline-block">
                No issues found
              </span>
            )}
          </td>

          {/* Build Issues */}
          <td className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100 align-top">
            {buildIssues.length > 0 ? (
              <ul className="list-disc list-inside space-y-1">
                {buildIssues.map((item, idx) => (
                  <li key={idx} className="text-red-600 dark:text-red-400">{item}</li>
                ))}
              </ul>
            ) : (
              <span className="text-green-600 bg-green-100 dark:bg-green-900/30 dark:text-green-400 rounded px-2 py-1 inline-block">
                No issues found
              </span>
            )}
          </td>

        </tr>
      </tbody>
    </table>
  );
}






                  // Handle single object case
                  if (!Array.isArray(parsedResult)) {
                    parsedResult = [parsedResult];
                  }

                  if (parsedResult.length === 0) {
                    return (
                      <div className="text-center py-4 text-gray-500">
                        No results to display
                      </div>
                    );
                  }

                  // Get all unique keys from the first item
                  const keys = Object.keys(parsedResult[0]);
                  
                  // Function to format key for display
                  const formatKey = (key: string) => {
                    return key
                      .replace(/([A-Z])/g, ' $1') // Add space before capital letters
                      .replace(/^./, str => str.toUpperCase()) // Capitalize first letter
                      .trim();
                  };

                  return (
                    <table className="w-full border-collapse">
                      <thead>
                        <tr className="bg-gray-50 dark:bg-gray-800/50">
                          {keys.map((key) => (
                            <th key={key} className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">
                              {formatKey(key)}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                        {parsedResult.map((item: any, index: number) => (
                          <tr key={index} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                            {keys.map((key) => {
                              const value = item[key];
                              const stringValue = value !== null && value !== undefined ? String(value) : '-';
                              const shouldBadge = key.toLowerCase().includes('status') || 
                                                key.toLowerCase().includes('risk') || 
                                                key.toLowerCase().includes('severity') ||
                                                key.toLowerCase().includes('level');
                              
                              const getBadgeClass = () => {
                                if (value === null || value === undefined) {
                                  return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';
                                }
                                const lowerValue = stringValue.toLowerCase();
                                if (lowerValue.includes('low') || lowerValue.includes('safe') || lowerValue.includes('secure')) {
                                  return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';
                                }
                                if (lowerValue.includes('high') || lowerValue.includes('critical') || lowerValue.includes('vulnerable')) {
                                  return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';
                                }
                                if (lowerValue.includes('medium') || lowerValue.includes('warning')) {
                                  return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400';
                                }
                                return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400';
                              };

                              // Function to render nested content
                              const renderNestedContent = (value: any) => {
                                if (Array.isArray(value)) {
                                  return (
                                    <div className="space-y-2">
                                      {value.map((item, idx) => (
                                        <div key={idx} className="pl-4 border-l-2 border-gray-200 dark:border-gray-700">
                                          {typeof item === 'object' && item !== null ? (
                                            Object.entries(item).map(([nestedKey, nestedValue]) => (
                                              <div key={nestedKey} className="text-sm">
                                                <span className="font-medium">{nestedKey}: </span>
                                                <span>{String(nestedValue)}</span>
                                              </div>
                                            ))
                                          ) : (
                                            <span>{String(item)}</span>
                                          )}
                                        </div>
                                      ))}
                                    </div>
                                  );
                                }
                                
                                if (typeof value === 'object' && value !== null) {
                                  return (
                                    <div className="space-y-1">
                                      {Object.entries(value).map(([nestedKey, nestedValue]) => (
                                        <div key={nestedKey} className="text-sm">
                                          <span className="font-medium">{nestedKey}: </span>
                                          <span>{String(nestedValue)}</span>
                                        </div>
                                      ))}
                                    </div>
                                  );
                                }

                                return <span>{String(value)}</span>;
                              };

                              const hasNestedContent = Array.isArray(value) || (typeof value === 'object' && value !== null);

                              return (
                                <td key={key} className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                  {hasNestedContent ? (
                                    <div className="space-y-2">
                                      {renderNestedContent(value)}
                                    </div>
                                  ) : shouldBadge ? (
                                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getBadgeClass()}`}>
                                      {stringValue}
                                    </span>
                                  ) : (
                                    stringValue
                                  )}
                                </td>
                              );
                            })}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  );
                } catch (error) {
                  return (
                    <div className="text-center py-4 text-gray-500">
                      Error parsing results: {error instanceof Error ? error.message : 'Unknown error'}
                    </div>
                  );
                }
              })()}
            </div>

            <div className="flex flex-wrap gap-4 mt-6">
              <Button variant="outline" onClick={handleDownload}>
                <Download className="w-4 h-4 mr-2" />
                Download Report
              </Button>
              <Button variant="outline" onClick={handleCopy}>
                <Copy className="w-4 h-4 mr-2" />
                Copy Report
              </Button>
              <div className="flex gap-2 relative">
                <Input
                  type="email"
                  placeholder="Enter email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className={showEmailError ? "ring-2 ring-red-500" : ""}
                />
                <Button onClick={handleEmailReport} className="relative">
                  {isEmailSent ? (
                    <motion.div initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }}>
                      <CheckCircle className="w-4 h-4 text-green-500" />
                    </motion.div>
                  ) : (
                    <Mail className="w-4 h-4" />
                  )}
                </Button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Selection Required Dialog  */}
      <Dialog open={showError} onOpenChange={setShowError}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <AlertCircle className="w-5 h-5 text-red-500" />
              Selection Required
            </DialogTitle>
            <DialogDescription>Please select a vulnerability scanning tool before starting the scan.</DialogDescription>
          </DialogHeader>
        </DialogContent>
      </Dialog>

      {/* Dark mode background effects */}
      {/* <div className="fixed inset-0 -z-10 dark:bg-gray-900">
        <div className="absolute top-0 left-0 w-1/3 h-1/3 bg-purple-500/10 rounded-full filter blur-3xl animate-pulse"></div>
        <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-blue-500/10 rounded-full filter blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/4 w-1/4 h-1/4 bg-pink-500/10 rounded-full filter blur-3xl animate-pulse delay-2000"></div>
      </div> */}
    </div>
  )
}

"use client"

import { useState, useEffect } from "react"
import axios from "axios"
import { Shield, Upload, LinkIcon, Download, Copy, Mail, AlertCircle, CheckCircle, AlertTriangle, Search, Zap } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { FileInput } from "@/components/ui/file-input"
import { ScanProgress } from "@/components/ui/scan-progress"
import Link from "next/link"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { toast } from "@/lib/hooks/use-toast"
import { motion, AnimatePresence } from "framer-motion"
import FeatureDisabledMessage from "@/app/(main)/components/FeatureDisabledMessage"
import { modifyToolkitTokens } from "@/app/services/api"

const API_BASE_URL = 'http://localhost:3000/malware';

interface ScanOption {
  type: "file" | "url"
  data: File | string
}

export default function MalwareDetection() {
  const [selectedOption, setSelectedOption] = useState<"file" | "url" | null>(null)
  const [file, setFile] = useState<File | null>(null)
  const [fileName, setFileName] = useState<string>("")
  const [url, setUrl] = useState("")
  const [showResult, setShowResult] = useState(false)
  const [email, setEmail] = useState("")
  const [showError, setShowError] = useState(false)
  const [showEmailError, setShowEmailError] = useState(false)
  const [isEmailSent, setIsEmailSent] = useState(false)
  const [isScanning, setIsScanning] = useState(false)
  const [scanResult, setScanResult] = useState<any>(null)
  const [isFeatureEnabled, setIsFeatureEnabled] = useState(true)

  // Check if feature is enabled
  useEffect(() => {
    // In a real app, this would be an API call or context check
    // For demo purposes, we'll check localStorage
    const checkFeatureStatus = () => {
      try {
        const disabledFeatures = localStorage.getItem("disabledFeatures")
        if (disabledFeatures) {
          const features = JSON.parse(disabledFeatures)
          // Feature is disabled if it's in the disabledFeatures array
          setIsFeatureEnabled(!features.includes("malware-detection"))
        } else {
          // Default to enabled if no disabled features found
          setIsFeatureEnabled(true)
        }
      } catch (error) {
        console.error("Error checking feature status:", error)
        // Default to enabled on error
        setIsFeatureEnabled(true)
      }
    }

    checkFeatureStatus()

    // Set up event listener for feature changes
    window.addEventListener("storage", checkFeatureStatus)

    return () => {
      window.removeEventListener("storage", checkFeatureStatus)
    }
  }, [])

  const handleAction = async () => {
    if (!selectedOption || (selectedOption === "file" && !file) || (selectedOption === "url" && !url)) {
      setShowError(true)
      return
    }

    setIsScanning(true)
    setShowResult(false)

    try {
      let response;
      
      if (selectedOption === "file") {
        // Store file name before upload
        setFileName(file!.name)
        // Handle file upload with multipart/form-data
        const formData = new FormData();
        formData.append("file", file!);
        
        response = await axios.post(`${API_BASE_URL}/malwarefile`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });
      } else {
        // Handle URL scan with JSON
        response = await axios.post(`${API_BASE_URL}/malwareurl`, {
          url: url.trim()
        });
      }

      await handleScanComplete(response.data);
      toast({
        title: "Scan Complete",
        description: "Malware detection scan completed successfully.",
      });
    } catch (error: any) {
      console.error("Scanning error:", error.response?.data || error.message);
      toast({
        title: "Scan Failed",
        description: error.response?.data?.message || "An error occurred during the malware scan.",
        variant: "destructive",
      });
      setIsScanning(false);
    }
  }

  const handleScanComplete = async (result: any) => {
    setIsScanning(false)
    setScanResult(result)
    setShowResult(true)
    
    // Deduct 1 toolkit token after successful scan
    try {
      const newTokenCount = await modifyToolkitTokens('deduct', 1);
      console.log('ðŸŽ« Token deducted, remaining tokens:', newTokenCount);
      
      // Trigger a custom event to update the navbar
      window.dispatchEvent(new CustomEvent('tokensUpdated', { 
        detail: { tokens: newTokenCount } 
      }));
    } catch (error) {
      console.error('Failed to deduct token:', error);
      // Don't show error to user since scan was successful
    }
  }

  const handleEmailReport = () => {
    if (!email) {
      setShowEmailError(true)
      setTimeout(() => setShowEmailError(false), 3000)
      return
    }

    setIsEmailSent(true)
    toast({
      title: "Report Sent!",
      description: "The analysis report has been sent to your email.",
    })

    setTimeout(() => {
      setIsEmailSent(false)
      setEmail("")
    }, 2000)
  }

  const handleDownload = () => {
    if (!scanResult) return;
    
    const blob = new Blob([JSON.stringify(scanResult, null, 2)], { type: 'application/json' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `malware-detection-report-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);
  }

  const handleCopy = () => {
    if (!scanResult) return;
    
    navigator.clipboard.writeText(JSON.stringify(scanResult, null, 2));
    toast({
      title: "Copied!",
      description: "Report copied to clipboard.",
    });
  }

  // If feature is disabled, show message
  if (!isFeatureEnabled) {
    return <FeatureDisabledMessage featureName="Malware Detection Toolkit" />
  }

  return (
    <div className="space-y-8">
      <div className="bg-gradient-to-r from-red-600 to-orange-600 text-white rounded-3xl p-8 shadow-xl">
        <h1 className="text-4xl font-bold mb-4">Malware Detection</h1>
        <p className="text-xl">Scan files and URLs for potential malware threats</p>
      </div>



      <div className="grid md:grid-cols-2 gap-6">
        <div
          className={`bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-2xl shadow-lg p-6 cursor-pointer transition-all duration-300 hover:shadow-xl dark:hover:shadow-purple-500/10 ${
            selectedOption === "file" ? "ring-2 ring-blue-500" : ""
          }`}
          onClick={() => setSelectedOption("file")}
        >
          <div className="flex items-center mb-4">
            <Upload className="w-8 h-8 text-blue-500 mr-3" />
            <div>
              <h2 className="text-xl font-semibold">Upload File</h2>
              <p className="text-sm text-gray-500">Scan local files for potential threats</p>
            </div>
          </div>
          {selectedOption === "file" && (
            <div className="space-y-2">
              <FileInput
                value={file}
                onChange={setFile}
                onUploadComplete={(result) => {
                  toast({
                    title: "File uploaded successfully",
                    description: "Ready to start malware analysis.",
                  })
                }}
              />
              {file && (
                <div className="flex items-center gap-2 p-2 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  <span className="text-sm text-green-700 dark:text-green-300">
                    {file.name} ({file.size} bytes)
                  </span>
                </div>
              )}
              
              {/* Action buttons for file scan */}
              <div className="flex gap-2 pt-2">
                <Button 
                  onClick={handleAction} 
                  className="bg-red-500 hover:bg-red-600 text-white"
                  disabled={isScanning}
                >
                  {isScanning ? (
                    <>
                      <div className="w-4 h-4 mr-2 animate-spin rounded-full border-2 border-white border-t-transparent" />
                      Scanning...
                    </>
                  ) : (
                    <>
                      <Shield className="w-4 h-4 mr-2" />
                      Start Scan
                    </>
                  )}
                </Button>

                {showResult && scanResult && (
                  <Button
                    variant="outline"
                    className="bg-blue-500 text-white hover:bg-blue-600"
                    onClick={() => {
                      document.getElementById("results-section")?.scrollIntoView({ behavior: "smooth" })
                    }}
                  >
                    <Zap className="w-4 h-4 mr-2" />
                    View Results
                  </Button>
                )}
              </div>
            </div>
          )}
        </div>

        <div
          className={`bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-2xl shadow-lg p-6 cursor-pointer transition-all duration-300 hover:shadow-xl dark:hover:shadow-purple-500/10 ${
            selectedOption === "url" ? "ring-2 ring-green-500" : ""
          }`}
          onClick={() => setSelectedOption("url")}
        >
          <div className="flex items-center mb-4">
            <LinkIcon className="w-8 h-8 text-green-500 mr-3" />
            <div>
              <h2 className="text-xl font-semibold">URL Scan</h2>
              <p className="text-sm text-gray-500">Analyze URLs for malicious content</p>
            </div>
          </div>
          {selectedOption === "url" && (
            <div className="space-y-4">
              <Input
                type="url"
                placeholder="Enter URL to scan (e.g., https://example.com)"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="mt-4"
              />
              
              {/* Action buttons for URL scan */}
              <div className="flex gap-2">
                <Button 
                  onClick={handleAction} 
                  className="bg-red-500 hover:bg-red-600 text-white"
                  disabled={isScanning}
                >
                  {isScanning ? (
                    <>
                      <div className="w-4 h-4 mr-2 animate-spin rounded-full border-2 border-white border-t-transparent" />
                      Scanning...
                    </>
                  ) : (
                    <>
                      <Shield className="w-4 h-4 mr-2" />
                      Start Scan
                    </>
                  )}
                </Button>

                {showResult && scanResult && (
                  <Button
                    variant="outline"
                    className="bg-blue-500 text-white hover:bg-blue-600"
                    onClick={() => {
                      document.getElementById("results-section")?.scrollIntoView({ behavior: "smooth" })
                    }}
                  >
                    <Zap className="w-4 h-4 mr-2" />
                    View Results
                  </Button>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Results Section */}
      <AnimatePresence>
        {showResult && scanResult && (
          <motion.div
            id="results-section"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-2xl shadow-lg p-6 mb-8"
          >
            <h2 className="text-2xl font-semibold mb-4">Malware Detection Report</h2>
            
            <div className="overflow-x-auto">
              {(() => {
                try {
                  let parsedResult = typeof scanResult === 'string' ? JSON.parse(scanResult) : scanResult;

                  // Show initial state if no scan has been run
                  if (!parsedResult || Object.keys(parsedResult).length === 0) {
                    return (
                      <div className="text-center py-12">
                        <div className="flex flex-col items-center gap-4">
                          <Search className="w-12 h-12 text-gray-400 dark:text-gray-600" />
                          <h3 className="text-xl font-medium text-gray-700 dark:text-gray-300">
                            Ready to Scan
                          </h3>
                          <p className="text-gray-500 dark:text-gray-400 max-w-md text-center">
                            Select a scan method and upload a file or enter a URL to generate a detailed malware analysis report.
                          </p>
                        </div>
                      </div>
                    );
                  }

                  // handle url response 
if (parsedResult.result && parsedResult.result.url && typeof parsedResult.result.is_suspicious === "boolean") {
    const isSuspicious = parsedResult.result.is_suspicious;

    // Filter out any details that contain the word "error" (case-insensitive)
    const filteredDetails = Array.isArray(parsedResult.result.details)
        ? parsedResult.result.details.filter((item: string) => !/error/i.test(item))
        : [];

    return (
        <div className="space-y-6">
            <table className="w-full border-collapse rounded-lg overflow-hidden">
                <thead>
                    <tr className="bg-gray-100 dark:bg-gray-800/50">
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-700 dark:text-gray-300">URL</th>
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-700 dark:text-gray-300">Suspicious</th>
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-700 dark:text-gray-300">Details</th>
                    </tr>
                </thead>
                <tbody>
                    <tr className="text-gray-900 dark:text-gray-100">
                        {/* URL */}
                        <td className="px-4 py-3 text-sm break-all align-top font-medium">
                            {parsedResult.result.url}
                        </td>

                        {/* Suspicious column with colored label only */}
                        <td className="px-4 py-3 text-sm font-semibold align-top">
                            {isSuspicious ? (
                                <span className="inline-flex items-center gap-1 bg-red-200 text-red-800 dark:bg-red-700 dark:text-white px-2 py-1 rounded-md">
                                    ðŸš¨ Yes
                                </span>
                            ) : (
                                <span className="inline-flex items-center gap-1 bg-green-200 text-green-800 dark:bg-green-700 dark:text-white px-2 py-1 rounded-md">
                                    âœ… No
                                </span>
                            )}
                        </td>

                        {/* Details */}
                        <td className="px-4 py-3 text-sm align-top">
                            {isSuspicious && filteredDetails.length > 0 ? (
                                <ul className="list-disc pl-5 space-y-1">
                                    {filteredDetails.map((item: string, index: number) => (
                                        <li key={index}>{item}</li>
                                    ))}
                                </ul>
                            ) : (
                                <span className="text-gray-700 dark:text-gray-300 italic">
                                    No suspicious indicators were detected.
                                </span>
                            )}
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    );
}

// handle file response 
if (
    parsedResult.result &&
    typeof parsedResult.result.is_suspicious === "boolean" &&
    (typeof parsedResult.result.file === "string" || fileName)
) {
    const isSuspicious = parsedResult.result.is_suspicious;

    // Filter any entries with "Error" (not needed here but kept consistent)
    const filteredDetails = Array.isArray(parsedResult.result.details)
        ? parsedResult.result.details.filter((item: string) => !/error/i.test(item))
        : [];

    return (
        <div className="space-y-6">
            <table className="w-full border-collapse rounded-lg overflow-hidden">
                <thead>
                    <tr className="bg-gray-100 dark:bg-gray-800/50">
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-700 dark:text-gray-300">File</th>
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-700 dark:text-gray-300">Suspicious</th>
                        <th className="px-4 py-3 text-left text-sm font-medium text-gray-700 dark:text-gray-300">Details</th>
                    </tr>
                </thead>
                <tbody>
                    <tr className="text-gray-900 dark:text-gray-100">
                        {/* File name */}
                        <td className="px-4 py-3 text-sm break-all align-top font-medium">
                            {fileName || parsedResult.result.file}
                        </td>

                        {/* Suspicious column with color-coded label */}
                        <td className="px-4 py-3 text-sm font-semibold align-top">
                            {isSuspicious ? (
                                <span className="inline-flex items-center gap-1 bg-red-200 text-red-800 dark:bg-red-700 dark:text-white px-2 py-1 rounded-md">
                                    ðŸš¨ Yes
                                </span>
                            ) : (
                                <span className="inline-flex items-center gap-1 bg-green-200 text-green-800 dark:bg-green-700 dark:text-white px-2 py-1 rounded-md">
                                    âœ… No
                                </span>
                            )}
                        </td>

                        {/* Details */}
                        <td className="px-4 py-3 text-sm align-top">
                            {isSuspicious && filteredDetails.length > 0 ? (
                                <ul className="list-disc pl-5 space-y-1">
                                    {filteredDetails.map((item: string, index: number) => (
                                        <li key={index}>{item}</li>
                                    ))}
                                </ul>
                            ) : (
                                <span className="text-gray-700 dark:text-gray-300 italic">
                                    No suspicious indicators were detected.
                                </span>
                            )}
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    );
}





                  // Handle single object case
                  if (!Array.isArray(parsedResult)) {
                    parsedResult = [parsedResult];
                  }

                  if (parsedResult.length === 0) {
                    return (
                      <div className="text-center py-4 text-gray-500">
                        No results to display
                      </div>
                    );
                  }

                  // Get all unique keys from the first item
                  const keys = Object.keys(parsedResult[0]);
                  
                  // Function to format key for display
                  const formatKey = (key: string) => {
                    return key
                      .replace(/([A-Z])/g, ' $1') // Add space before capital letters
                      .replace(/^./, str => str.toUpperCase()) // Capitalize first letter
                      .trim();
                  };

                  return (
                    <table className="w-full border-collapse">
                      <thead>
                        <tr className="bg-gray-50 dark:bg-gray-800/50">
                          {keys.map((key) => (
                            <th key={key} className="px-4 py-3 text-left text-sm font-medium text-gray-500 dark:text-gray-400">
                              {formatKey(key)}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                        {parsedResult.map((item: any, index: number) => (
                          <tr key={index} className="hover:bg-gray-50 dark:hover:bg-gray-800/50">
                            {keys.map((key) => {
                              const value = item[key];
                              const stringValue = value !== null && value !== undefined ? String(value) : '-';
                              const shouldBadge = key.toLowerCase().includes('status') || 
                                                key.toLowerCase().includes('threat') || 
                                                key.toLowerCase().includes('malware') ||
                                                key.toLowerCase().includes('clean') ||
                                                key.toLowerCase().includes('infected') ||
                                                key.toLowerCase().includes('safe') ||
                                                key.toLowerCase().includes('detected');
                              
                              const getBadgeClass = () => {
                                if (value === null || value === undefined) {
                                  return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';
                                }
                                const lowerValue = stringValue.toLowerCase();
                                if (lowerValue.includes('clean') || lowerValue.includes('safe') || lowerValue.includes('no malware') || lowerValue === 'false') {
                                  return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';
                                }
                                if (lowerValue.includes('malware') || lowerValue.includes('infected') || lowerValue.includes('dangerous') || lowerValue.includes('detected') || lowerValue === 'true') {
                                  return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';
                                }
                                if (lowerValue.includes('suspicious') || lowerValue.includes('warning')) {
                                  return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400';
                                }
                                return 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-400';
                              };

                              // Function to render nested content
                              const renderNestedContent = (value: any) => {
                                if (Array.isArray(value)) {
                                  return (
                                    <div className="space-y-2">
                                      {value.map((item, idx) => (
                                        <div key={idx} className="pl-4 border-l-2 border-gray-200 dark:border-gray-700">
                                          {typeof item === 'object' && item !== null ? (
                                            Object.entries(item).map(([nestedKey, nestedValue]) => (
                                              <div key={nestedKey} className="text-sm">
                                                <span className="font-medium">{nestedKey}: </span>
                                                <span>{String(nestedValue)}</span>
                                              </div>
                                            ))
                                          ) : (
                                            <span>{String(item)}</span>
                                          )}
                                        </div>
                                      ))}
                                    </div>
                                  );
                                }
                                
                                if (typeof value === 'object' && value !== null) {
                                  return (
                                    <div className="space-y-1">
                                      {Object.entries(value).map(([nestedKey, nestedValue]) => (
                                        <div key={nestedKey} className="text-sm">
                                          <span className="font-medium">{nestedKey}: </span>
                                          <span>{String(nestedValue)}</span>
                                        </div>
                                      ))}
                                    </div>
                                  );
                                }

                                return <span>{String(value)}</span>;
                              };

                              const hasNestedContent = Array.isArray(value) || (typeof value === 'object' && value !== null);

                              return (
                                <td key={key} className="px-4 py-3 text-sm text-gray-900 dark:text-gray-100">
                                  {hasNestedContent ? (
                                    <div className="space-y-2">
                                      {renderNestedContent(value)}
                                    </div>
                                  ) : shouldBadge ? (
                                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getBadgeClass()}`}>
                                      {stringValue}
                                    </span>
                                  ) : (
                                    stringValue
                                  )}
                                </td>
                              );
                            })}
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  );
                } catch (error) {
                  return (
                    <div className="text-center py-4 text-gray-500">
                      Error parsing results: {error instanceof Error ? error.message : 'Unknown error'}
                    </div>
                  );
                }
              })()}
            </div>

            <div className="flex flex-wrap gap-4 mt-6">
              <Button variant="outline" onClick={handleDownload}>
                <Download className="w-4 h-4 mr-2" />
                Download Report
              </Button>
              <Button variant="outline" onClick={handleCopy}>
                <Copy className="w-4 h-4 mr-2" />
                Copy Report
              </Button>
              <div className="flex gap-2 relative">
                <Input
                  type="email"
                  placeholder="Enter email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  className={showEmailError ? "ring-2 ring-red-500" : ""}
                />
                <Button onClick={handleEmailReport} className="relative">
                  {isEmailSent ? (
                    <motion.div initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }}>
                      <CheckCircle className="w-4 h-4 text-green-500" />
                    </motion.div>
                  ) : (
                    <Mail className="w-4 h-4" />
                  )}
                </Button>
                {showEmailError && (
                  <motion.div
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    className="absolute right-full mr-2 top-1/2 -translate-y-1/2 text-red-500 text-sm whitespace-nowrap"
                  >
                    Please enter an email
                  </motion.div>
                )}
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      

      {isScanning && (
        <ScanProgress
          scanType={selectedOption === "file" ? "File Analysis" : "URL Analysis"}
          data={selectedOption === "file" ? { fileName: file?.name, fileSize: file?.size } : { url }}
          onComplete={handleScanComplete}
        />
      )}

      <Dialog open={showError} onOpenChange={setShowError}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <AlertCircle className="w-5 h-5 text-red-500" />
              Input Required
            </DialogTitle>
            <DialogDescription>
              Please select a scan method and provide either a file or URL to proceed.
            </DialogDescription>
          </DialogHeader>
        </DialogContent>
      </Dialog>

      {/* Dark mode background effects */}
      {/* <div className="fixed inset-0 -z-10 dark:bg-gray-900">
        <div className="absolute top-0 left-0 w-1/3 h-1/3 bg-purple-500/10 rounded-full filter blur-3xl animate-pulse"></div>
        <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-blue-500/10 rounded-full filter blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/4 w-1/4 h-1/4 bg-pink-500/10 rounded-full filter blur-3xl animate-pulse delay-2000"></div>
      </div> */}
    </div>
  )
}

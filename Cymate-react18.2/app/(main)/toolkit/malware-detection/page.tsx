"use client"

import { useState, useEffect } from "react"
import { Shield, Upload, LinkIcon, Download, Copy, Mail, AlertCircle, CheckCircle, AlertTriangle } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { FileInput } from "@/components/ui/file-input"
import { ScanProgress } from "@/components/ui/scan-progress"
import Link from "next/link"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { toast } from "@/lib/hooks/use-toast"
import { motion, AnimatePresence } from "framer-motion"
import FeatureDisabledMessage from "@/app/(main)/components/FeatureDisabledMessage"

interface ScanOption {
  type: "file" | "url"
  data: File | string
}

export default function MalwareDetection() {
  const [selectedOption, setSelectedOption] = useState<"file" | "url" | null>(null)
  const [file, setFile] = useState<File | null>(null)
  const [url, setUrl] = useState("")
  const [showResult, setShowResult] = useState(false)
  const [email, setEmail] = useState("")
  const [showError, setShowError] = useState(false)
  const [showEmailError, setShowEmailError] = useState(false)
  const [isEmailSent, setIsEmailSent] = useState(false)
  const [isScanning, setIsScanning] = useState(false)
  const [scanResult, setScanResult] = useState<any>(null)
  const [isFeatureEnabled, setIsFeatureEnabled] = useState(true)

  // Check if feature is enabled
  useEffect(() => {
    // In a real app, this would be an API call or context check
    // For demo purposes, we'll check localStorage
    const checkFeatureStatus = () => {
      try {
        const disabledFeatures = localStorage.getItem("disabledFeatures")
        if (disabledFeatures) {
          const features = JSON.parse(disabledFeatures)
          // Feature is disabled if it's in the disabledFeatures array
          setIsFeatureEnabled(!features.includes("malware-detection"))
        } else {
          // Default to enabled if no disabled features found
          setIsFeatureEnabled(true)
        }
      } catch (error) {
        console.error("Error checking feature status:", error)
        // Default to enabled on error
        setIsFeatureEnabled(true)
      }
    }

    checkFeatureStatus()

    // Set up event listener for feature changes
    window.addEventListener("storage", checkFeatureStatus)

    return () => {
      window.removeEventListener("storage", checkFeatureStatus)
    }
  }, [])

  const handleAction = async () => {
    if (!selectedOption || (selectedOption === "file" && !file) || (selectedOption === "url" && !url)) {
      setShowError(true)
      return
    }

    setIsScanning(true)
    setShowResult(false)

    // Start scan
    const scanData = selectedOption === "file" ? file : url
    setIsScanning(true)
  }

  const handleScanComplete = (result: any) => {
    setIsScanning(false)
    setScanResult(result)
    setShowResult(true)
  }

  const handleEmailReport = () => {
    if (!email) {
      setShowEmailError(true)
      setTimeout(() => setShowEmailError(false), 3000)
      return
    }

    setIsEmailSent(true)
    toast({
      title: "Report Sent!",
      description: "The analysis report has been sent to your email.",
    })

    setTimeout(() => {
      setIsEmailSent(false)
      setEmail("")
    }, 2000)
  }

  // If feature is disabled, show message
  if (!isFeatureEnabled) {
    return <FeatureDisabledMessage featureName="Malware Detection Toolkit" />
  }

  return (
    <div className="space-y-8">
      <div className="bg-gradient-to-r from-red-600 to-orange-600 text-white rounded-3xl p-8 shadow-xl">
        <h1 className="text-4xl font-bold mb-4">Malware Detection</h1>
        <p className="text-xl">Scan files and URLs for potential malware threats</p>
      </div>

      {/* Results Section */}
      <AnimatePresence>
        {showResult && (
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-2xl shadow-lg p-6 mb-8"
          >
            <h2 className="text-2xl font-semibold mb-4">Scan Results</h2>
            <div className="space-y-4">
              <p className="text-gray-600 dark:text-gray-300">
                Sample result content here. Detailed analysis of the scanned file or URL would be displayed in this
                section.
              </p>
              <div className="flex flex-wrap gap-4 mt-4">
                <Button variant="outline" onClick={() => {}}>
                  <Download className="w-4 h-4 mr-2" />
                  Download Report
                </Button>
                <Button variant="outline" onClick={() => {}}>
                  <Copy className="w-4 h-4 mr-2" />
                  Copy Report
                </Button>
                <div className="flex gap-2 relative">
                  <Input
                    type="email"
                    placeholder="Enter email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className={showEmailError ? "ring-2 ring-red-500" : ""}
                  />
                  <Button onClick={handleEmailReport} className="relative">
                    {isEmailSent ? (
                      <motion.div initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }}>
                        <CheckCircle className="w-4 h-4 text-green-500" />
                      </motion.div>
                    ) : (
                      <Mail className="w-4 h-4" />
                    )}
                  </Button>
                  {showEmailError && (
                    <motion.div
                      initial={{ opacity: 0, x: 20 }}
                      animate={{ opacity: 1, x: 0 }}
                      exit={{ opacity: 0, x: 20 }}
                      className="absolute right-full mr-2 top-1/2 -translate-y-1/2 text-red-500 text-sm whitespace-nowrap"
                    >
                      Please enter an email
                    </motion.div>
                  )}
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <div className="grid md:grid-cols-2 gap-6">
        <div
          className={`bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-2xl shadow-lg p-6 cursor-pointer transition-all duration-300 hover:shadow-xl dark:hover:shadow-purple-500/10 ${
            selectedOption === "file" ? "ring-2 ring-blue-500" : ""
          }`}
          onClick={() => setSelectedOption("file")}
        >
          <div className="flex items-center mb-4">
            <Upload className="w-8 h-8 text-blue-500 mr-3" />
            <div>
              <h2 className="text-xl font-semibold">Upload File</h2>
              <p className="text-sm text-gray-500">Scan local files for potential threats</p>
            </div>
          </div>
          {selectedOption === "file" && (
            <FileInput
              accept=".exe,.dll,.pdf,.doc,.docx"
              value={file}
              onChange={setFile}
              onUploadComplete={(result) => {
                toast({
                  title: "File uploaded successfully",
                  description: "Ready to start malware analysis.",
                })
              }}
            />
          )}
        </div>

        <div
          className={`bg-white dark:bg-gray-800/30 backdrop-filter backdrop-blur-lg border border-white/20 dark:border-white/10 rounded-2xl shadow-lg p-6 cursor-pointer transition-all duration-300 hover:shadow-xl dark:hover:shadow-purple-500/10 ${
            selectedOption === "url" ? "ring-2 ring-green-500" : ""
          }`}
          onClick={() => setSelectedOption("url")}
        >
          <div className="flex items-center mb-4">
            <LinkIcon className="w-8 h-8 text-green-500 mr-3" />
            <div>
              <h2 className="text-xl font-semibold">URL Scan</h2>
              <p className="text-sm text-gray-500">Analyze URLs for malicious content</p>
            </div>
          </div>
          <Input
            type="url"
            placeholder="Enter URL to scan"
            value={url}
            onChange={(e) => setUrl(e.target.value)}
            className="mt-4"
          />
        </div>
      </div>

      {isScanning && (
        <ScanProgress
          scanType={selectedOption === "file" ? "File Analysis" : "URL Analysis"}
          data={selectedOption === "file" ? file : url}
          onComplete={handleScanComplete}
        />
      )}

      <div className="flex flex-wrap gap-4 mt-8">
        <Button onClick={handleAction} className="bg-blue-500 hover:bg-blue-600 text-white">
          <Shield className="w-4 h-4 mr-2" />
          Start Scan
        </Button>

        <Link href="/toolkit/threat-intelligence">
          <Button
            variant="outline"
            className="relative overflow-hidden group hover:shadow-lg hover:shadow-red-500/20 transition-all duration-300"
          >
            <span className="absolute inset-0 bg-gradient-to-r from-red-500 to-pink-500 opacity-0 group-hover:opacity-20 transition-opacity duration-300"></span>
            <AlertTriangle className="w-4 h-4 mr-2" />
            <span className="relative z-10 text-gray-700 dark:text-gray-300 group-hover:text-red-500 transition-colors duration-300">
              Deep Dive
            </span>
          </Button>
        </Link>
      </div>

      <Dialog open={showError} onOpenChange={setShowError}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2">
              <AlertCircle className="w-5 h-5 text-red-500" />
              Input Required
            </DialogTitle>
            <DialogDescription>
              Please select a scan method and provide either a file or URL to proceed.
            </DialogDescription>
          </DialogHeader>
        </DialogContent>
      </Dialog>

      {/* Dark mode background effects */}
      <div className="fixed inset-0 -z-10 dark:bg-gray-900">
        <div className="absolute top-0 left-0 w-1/3 h-1/3 bg-purple-500/10 rounded-full filter blur-3xl animate-pulse"></div>
        <div className="absolute bottom-0 right-0 w-1/2 h-1/2 bg-blue-500/10 rounded-full filter blur-3xl animate-pulse delay-1000"></div>
        <div className="absolute top-1/2 left-1/4 w-1/4 h-1/4 bg-pink-500/10 rounded-full filter blur-3xl animate-pulse delay-2000"></div>
      </div>
    </div>
  )
}
